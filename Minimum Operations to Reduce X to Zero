

Example 1:

Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.

Example 2:

Input: nums = [5,6,7,8,9], x = 4
Output: -1

Example 3:

Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.


//code 

class Solution {
    public int minOperations(int[] nums, int x) {
        int n = nums.length;
        int target = -x;
        for (int num : nums) {
            target += num;
        }
        
        if (target == 0) {
            return n;
        }
        
        int left = 0;
        int minOps = Integer.MAX_VALUE;
        int currentSum = 0;
        
        for (int right = 0; right < n; right++) {
            currentSum += nums[right];
            
            while (currentSum > target && left <= right) {
                currentSum -= nums[left];
                left++;
            }
            
            if (currentSum == target) {
                minOps = Math.min(minOps, n - (right - left + 1));
            }
        }
        
        return minOps == Integer.MAX_VALUE ? -1 : minOps;
    }
}
